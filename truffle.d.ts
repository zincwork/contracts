// Autogenerated file
// DO NOT EDIT!!!
// You can update it by running `yarn generate-types`

import * as Web3 from "web3"
import * as BigNumber from "bignumber.js"

type Address = string
type TransactionOptions = Partial<Transaction>
type UInt = number | BigNumber.BigNumber

interface Transaction {
  hash: string
  nonce: number
  blockHash: string | null
  blockNumber: number | null
  transactionIndex: number | null
  from: Address | ContractInstance
  to: string | null
  value: UInt
  gasPrice: UInt
  gas: number
  input: string
}

interface ContractInstance {
  address: string
  sendTransaction(options?: TransactionOptions): Promise<void>
}

export interface EncoderInstance extends ContractInstance {
  encodeUInt: {
    (uint: UInt, options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (uint: UInt, options?: TransactionOptions) => Promise<string>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  encodeAddress: {
    (address: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (address: Address, options?: TransactionOptions) => Promise<string>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  encodeString: {
    (str: string, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (str: string, options?: TransactionOptions) => Promise<string>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface EncoderContract {
  new: () => Promise<EncoderInstance>
  deployed(): Promise<EncoderInstance>
  at(address: string): EncoderInstance
}

export interface ERC20Instance extends ContractInstance {
  totalSupply: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  balanceOf: {
    (who: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      who: Address,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  allowance: {
    (owner: Address, spender: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      owner: Address,
      spender: Address,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transfer: {
    (to: Address, value: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      to: Address,
      value: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  approve: {
    (spender: Address, value: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      spender: Address,
      value: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transferFrom: {
    (
      from: Address,
      to: Address,
      value: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      from: Address,
      to: Address,
      value: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface ERC20Contract {
  new: () => Promise<ERC20Instance>
  deployed(): Promise<ERC20Instance>
  at(address: string): ERC20Instance
}

export interface ERC20BasicInstance extends ContractInstance {
  balanceOf: {
    (who: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      who: Address,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transfer: {
    (to: Address, value: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      to: Address,
      value: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface ERC20BasicContract {
  new: () => Promise<ERC20BasicInstance>
  deployed(): Promise<ERC20BasicInstance>
  at(address: string): ERC20BasicInstance
}

export interface ERC725Instance extends ContractInstance {
  MANAGEMENT_KEY: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  ACTION_KEY: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  ENCRYPTION_KEY: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  CLAIM_SIGNER_KEY: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }

  getKey: {
    (key: string, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      key: string,
      options?: TransactionOptions
    ) => Promise<[BigNumber.BigNumber[], BigNumber.BigNumber, string]>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  getKeyPurpose: {
    (key: string, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      key: string,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber[]>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  getKeysByPurpose: {
    (purpose: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (purpose: UInt, options?: TransactionOptions) => Promise<string[]>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  addKey: {
    (
      key: string,
      purpose: UInt,
      keyType: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      key: string,
      purpose: UInt,
      keyType: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  removeKey: {
    (key: string, purpose: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      key: string,
      purpose: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  execute: {
    (
      to: Address,
      value: UInt,
      data: string,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      to: Address,
      value: UInt,
      data: string,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  approve: {
    (id: UInt, approve: boolean, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      id: UInt,
      approve: boolean,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface ERC725Contract {
  new: () => Promise<ERC725Instance>
  deployed(): Promise<ERC725Instance>
  at(address: string): ERC725Instance
}

export interface IdentityInstance extends ContractInstance {
  MANAGEMENT_KEY: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  ACTION_KEY: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  ENCRYPTION_KEY: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  CLAIM_SIGNER_KEY: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }

  getKey: {
    (key: string, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      key: string,
      options?: TransactionOptions
    ) => Promise<[BigNumber.BigNumber[], BigNumber.BigNumber, string]>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  getKeyPurpose: {
    (key: string, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      key: string,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber[]>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  getKeysByPurpose: {
    (purpose: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (purpose: UInt, options?: TransactionOptions) => Promise<string[]>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  addKey: {
    (
      key: string,
      purpose: UInt,
      type: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      key: string,
      purpose: UInt,
      type: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  approve: {
    (id: UInt, approve: boolean, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      id: UInt,
      approve: boolean,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  execute: {
    (
      to: Address,
      value: UInt,
      data: string,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      to: Address,
      value: UInt,
      data: string,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  removeKey: {
    (key: string, purpose: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      key: string,
      purpose: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  keyHasPurpose: {
    (key: string, purpose: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      key: string,
      purpose: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  withdraw: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transferEth: {
    (amount: UInt, account: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      amount: UInt,
      account: Address,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  getBalance: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  getTokenBalance: {
    (token: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      token: Address,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  withdrawTokens: {
    (token: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      token: Address,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transferTokens: {
    (
      token: Address,
      to: Address,
      amount: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      token: Address,
      to: Address,
      amount: UInt,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface IdentityContract {
  new: () => Promise<IdentityInstance>
  deployed(): Promise<IdentityInstance>
  at(address: string): IdentityInstance
}

export interface MigrationsInstance extends ContractInstance {
  last_completed_migration: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  owner: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<Address>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }

  setCompleted: {
    (completed: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      completed: UInt,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  upgrade: {
    (new_address: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      new_address: Address,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface MigrationsContract {
  new: () => Promise<MigrationsInstance>
  deployed(): Promise<MigrationsInstance>
  at(address: string): MigrationsInstance
}

export interface OwnableInstance extends ContractInstance {
  owner: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<Address>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }

  renounceOwnership: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transferOwnership: {
    (newOwner: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      newOwner: Address,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface OwnableContract {
  new: () => Promise<OwnableInstance>
  deployed(): Promise<OwnableInstance>
  at(address: string): OwnableInstance
}

export interface RegistryInstance extends ContractInstance {
  renounceOwnership: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  owner: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<Address>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transferOwnership: {
    (newOwner: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      newOwner: Address,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }

  setClaim: {
    (
      subject: Address,
      issuer: Address,
      id: string,
      key: string,
      data: string,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      subject: Address,
      issuer: Address,
      id: string,
      key: string,
      data: string,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  getClaim: {
    (
      subject: Address,
      issuer: Address,
      id: string,
      key: string,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      subject: Address,
      issuer: Address,
      id: string,
      key: string,
      options?: TransactionOptions
    ) => Promise<string>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  removeClaim: {
    (
      subject: Address,
      issuer: Address,
      id: string,
      key: string,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      subject: Address,
      issuer: Address,
      id: string,
      key: string,
      options?: TransactionOptions
    ) => Promise<Web3.TransactionReceipt>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface RegistryContract {
  new: () => Promise<RegistryInstance>
  deployed(): Promise<RegistryInstance>
  at(address: string): RegistryInstance
}

export interface SafeMathInstance extends ContractInstance {}

export interface SafeMathContract {
  new: () => Promise<SafeMathInstance>
  deployed(): Promise<SafeMathInstance>
  at(address: string): SafeMathInstance
}

export interface SignatureValidatorInstance extends ContractInstance {
  checkSignature: {
    (
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ) => Promise<Address>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface SignatureValidatorContract {
  new: () => Promise<SignatureValidatorInstance>
  deployed(): Promise<SignatureValidatorInstance>
  at(address: string): SignatureValidatorInstance
}

export interface StandardTokenInstance extends ContractInstance {
  totalSupply: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  balanceOf: {
    (owner: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      owner: Address,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  allowance: {
    (owner: Address, spender: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      owner: Address,
      spender: Address,
      options?: TransactionOptions
    ) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transfer: {
    (to: Address, value: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      to: Address,
      value: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  approve: {
    (spender: Address, value: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      spender: Address,
      value: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  transferFrom: {
    (
      from: Address,
      to: Address,
      value: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      from: Address,
      to: Address,
      value: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  increaseApproval: {
    (spender: Address, addedValue: UInt, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (
      spender: Address,
      addedValue: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  decreaseApproval: {
    (
      spender: Address,
      subtractedValue: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      spender: Address,
      subtractedValue: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface StandardTokenContract {
  new: (totalSupply: UInt) => Promise<StandardTokenInstance>
  deployed(): Promise<StandardTokenInstance>
  at(address: string): StandardTokenInstance
}

export interface ZincAccessorInstance extends ContractInstance {
  checkSignature: {
    (
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ) => Promise<Address>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  encodeUInt: {
    (uint: UInt, options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (uint: UInt, options?: TransactionOptions) => Promise<string>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  nonce: {
    (options?: TransactionOptions): Promise<Web3.TransactionReceipt>
    call: (options?: TransactionOptions) => Promise<BigNumber.BigNumber>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  encodeAddress: {
    (address: Address, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (address: Address, options?: TransactionOptions) => Promise<string>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  encodeString: {
    (str: string, options?: TransactionOptions): Promise<
      Web3.TransactionReceipt
    >
    call: (str: string, options?: TransactionOptions) => Promise<string>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }

  constructUserIdentity: {
    (
      userAddress: Address,
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      userAddress: Address,
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ) => Promise<Address>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  addAccessor: {
    (
      key: Address,
      idContract: Address,
      purpose: UInt,
      userAddress: Address,
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      key: Address,
      idContract: Address,
      purpose: UInt,
      userAddress: Address,
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
  removeAccessor: {
    (
      key: Address,
      idContract: Address,
      purpose: UInt,
      userAddress: Address,
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ): Promise<Web3.TransactionReceipt>
    call: (
      key: Address,
      idContract: Address,
      purpose: UInt,
      userAddress: Address,
      message1: string,
      nonce: UInt,
      header1: string,
      header2: string,
      r: string,
      s: string,
      v: UInt,
      options?: TransactionOptions
    ) => Promise<boolean>
    estimateGas: (
      subject: string,
      issuer: string,
      id: string,
      key: string,
      data?: string,
      options?: {
        from?: string
        gas?: number
      }
    ) => number
  }
}

export interface ZincAccessorContract {
  new: () => Promise<ZincAccessorInstance>
  deployed(): Promise<ZincAccessorInstance>
  at(address: string): ZincAccessorInstance
}

declare type _contractTest = (accounts: string[]) => void
declare interface TransactionMeta {
  from: string
}

interface Artifacts {
  require(name: "Encoder"): EncoderContract
  require(name: "ERC20"): ERC20Contract
  require(name: "ERC20Basic"): ERC20BasicContract
  require(name: "ERC725"): ERC725Contract
  require(name: "Identity"): IdentityContract
  require(name: "Migrations"): MigrationsContract
  require(name: "Ownable"): OwnableContract
  require(name: "Registry"): RegistryContract
  require(name: "SafeMath"): SafeMathContract
  require(name: "SignatureValidator"): SignatureValidatorContract
  require(name: "StandardToken"): StandardTokenContract
  require(name: "ZincAccessor"): ZincAccessorContract
}

declare global {
  var artifacts: Artifacts
  var web3: Web3
  function contract(name: string, test: _contractTest): void
  function it(name: string, test: (accounts: string[]) => void): void
}
